"""
Exerc√≠cio 1: Cliente-Servidor TCP
Servidor multithread que aceita conex√µes, valida mensagens e responde confirma√ß√£o.

Participantes:
    - Daniel Gon√ßalves Lopes
    - Joana de Oliveira Rocha
    - Jo√£o Victor Almeida
"""

import socket
import threading

# Configura√ß√µes de rede
HOST = '0.0.0.0'      # escuta em todas as interfaces
PORT = 5000           # porta fixa para o servi√ßo TCP
MAX_BUFFER = 1024     # tamanho do buffer para recep√ß√£o de dados


def handle_client(conn, addr):
    """
    Lida com um cliente individual:
    - Recebe dados em loop
    - Valida mensagem n√£o vazia
    - Imprime no console e envia confirma√ß√£o de recebimento
    - Fecha conex√£o de forma segura
    """
    print(f'‚ñ∂ Conex√£o recebida de {addr}')
    with conn:
        while True:
            try:
                data = conn.recv(MAX_BUFFER)
                # se recv retornar bytes vazios, cliente desconectou
                if not data:
                    print(f'‚èπ Cliente {addr} desconectou.')
                    break

                message = data.decode('utf-8').strip()
                # valida√ß√£o de mensagem vazia
                if not message:
                    erro = 'Erro: mensagem vazia n√£o √© permitida'
                    conn.sendall(erro.encode('utf-8'))
                    continue

                # imprime a mensagem recebida no servidor
                print(f'üì® De {addr}: {message}')
                # envia confirma√ß√£o ao cliente
                conn.sendall('Mensagem recebida'.encode('utf-8'))

            except ConnectionResetError:
                # cliente fechou abruptamente
                print(f'‚ö†Ô∏è Conex√£o perdida com {addr}')
                break
            except Exception as e:
                # log de erro gen√©rico
                print(f'‚ùå Erro ao processar {addr}: {e}')
                break

    # fim do with conn: socket fechado automaticamente
    print(f'‚ùå Encerrada conex√£o com {addr}')


def main():
    """
    Inicializa o servidor TCP e gerencia threads para cada cliente.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        # permite reusar o endere√ßo rapidamente
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST, PORT))
        s.listen()
        print(f'üîä Servidor escutando em {HOST}:{PORT}...')

        while True:
            try:
                conn, addr = s.accept()
                # dispara nova thread para cada cliente
                thread = threading.Thread(
                    target=handle_client,
                    args=(conn, addr),
                    daemon=True
                )
                thread.start()
            except KeyboardInterrupt:
                # permite parar o servidor com Ctrl+C
                print('\nüî¥ Servidor encerrado pelo usu√°rio')
                break
            except Exception as e:
                print(f'‚ùå Erro no servidor: {e}')
                continue


if __name__ == '__main__':
    main()